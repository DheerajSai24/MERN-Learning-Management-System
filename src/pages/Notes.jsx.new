import { useState } from 'react'
import './Notes.css'

const Notes = () => {
  const [showAddForm, setShowAddForm] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [editingNote, setEditingNote] = useState(null)
  const [notes, setNotes] = useState([
    {
      id: 1,
      title: "React Hooks Overview",
      content: "useState: Manages state in functional components\nuseEffect: Handles side effects and lifecycle\nuseContext: Accesses React context\nuseRef: Maintains mutable references",
      tags: ["react", "hooks", "javascript"],
      createdAt: "2025-08-28T10:30:00",
      updatedAt: "2025-08-28T10:30:00"
    },
    {
      id: 2,
      title: "Data Structures Basics",
      content: "Arrays: Sequential collection of elements\nLinked Lists: Connected nodes with data and references\nStacks: LIFO data structure\nQueues: FIFO data structure",
      tags: ["dsa", "programming"],
      createdAt: "2025-08-27T15:45:00",
      updatedAt: "2025-08-27T16:20:00"
    },
    {
      id: 3,
      title: "CSS Grid Layout Tips",
      content: "1. Use grid-template-columns for column layout\n2. grid-gap for spacing between items\n3. fr unit for flexible layouts\n4. grid-area for named template areas",
      tags: ["css", "web-design"],
      createdAt: "2025-08-26T09:15:00",
      updatedAt: "2025-08-26T09:15:00"
    }
  ])

  const [newNote, setNewNote] = useState({
    title: '',
    content: '',
    tags: ''
  })

  const handleAddNote = (e) => {
    e.preventDefault()
    const currentDate = new Date().toISOString()
    const newNoteObject = {
      id: notes.length + 1,
      title: newNote.title,
      content: newNote.content,
      tags: newNote.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
      createdAt: currentDate,
      updatedAt: currentDate
    }

    setNotes([...notes, newNoteObject])
    setNewNote({ title: '', content: '', tags: '' })
    setShowAddForm(false)
  }

  const handleEditNote = (note) => {
    setEditingNote(note)
    setNewNote({
      title: note.title,
      content: note.content,
      tags: note.tags.join(', ')
    })
    setShowAddForm(true)
  }

  const handleUpdateNote = (e) => {
    e.preventDefault()
    const updatedNotes = notes.map(note => {
      if (note.id === editingNote.id) {
        return {
          ...note,
          title: newNote.title,
          content: newNote.content,
          tags: newNote.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
          updatedAt: new Date().toISOString()
        }
      }
      return note
    })

    setNotes(updatedNotes)
    setNewNote({ title: '', content: '', tags: '' })
    setEditingNote(null)
    setShowAddForm(false)
  }

  const handleDeleteNote = (noteId) => {
    if (window.confirm('Are you sure you want to delete this note?')) {
      setNotes(notes.filter(note => note.id !== noteId))
    }
  }

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }
    return new Date(dateString).toLocaleDateString('en-US', options)
  }

  const filteredNotes = notes.filter(note => 
    note.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    note.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
    note.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  return (
    <div className="notes-container">
      {/* Header */}
      <div className="notes-header">
        <div className="header-content">
          <h1>Notes</h1>
          <p>Create and manage your personal study notes</p>
        </div>
        <button 
          className="add-note-btn"
          onClick={() => {
            setShowAddForm(true)
            setEditingNote(null)
            setNewNote({ title: '', content: '', tags: '' })
          }}
        >
          + Add Note
        </button>
      </div>

      {/* Search Bar */}
      <div className="search-bar">
        <input
          type="text"
          placeholder="Search notes by title, content, or tags..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>

      {/* Notes Grid */}
      <div className="notes-grid">
        {filteredNotes.map(note => (
          <div key={note.id} className="note-card">
            <h3>{note.title}</h3>
            <p className="note-preview">{note.content}</p>
            <div className="note-tags">
              {note.tags.map((tag, index) => (
                <span key={index} className="tag">#{tag}</span>
              ))}
            </div>
            <div className="note-meta">
              <span>Updated: {formatDate(note.updatedAt)}</span>
            </div>
            <div className="note-actions">
              <button className="view-btn">
                <i className="fas fa-eye"></i> View
              </button>
              <button 
                className="edit-btn"
                onClick={() => handleEditNote(note)}
              >
                <i className="fas fa-edit"></i> Edit
              </button>
              <button 
                className="delete-btn"
                onClick={() => handleDeleteNote(note.id)}
              >
                <i className="fas fa-trash"></i> Delete
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Add/Edit Note Modal */}
      {showAddForm && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h2>{editingNote ? 'Edit Note' : 'Add New Note'}</h2>
              <button 
                className="close-btn"
                onClick={() => {
                  setShowAddForm(false)
                  setEditingNote(null)
                }}
              >
                Ã—
              </button>
            </div>
            <form onSubmit={editingNote ? handleUpdateNote : handleAddNote}>
              <div className="form-group">
                <label htmlFor="title">Title</label>
                <input
                  type="text"
                  id="title"
                  value={newNote.title}
                  onChange={(e) => setNewNote({
                    ...newNote,
                    title: e.target.value
                  })}
                  placeholder="Enter note title"
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="content">Content</label>
                <textarea
                  id="content"
                  value={newNote.content}
                  onChange={(e) => setNewNote({
                    ...newNote,
                    content: e.target.value
                  })}
                  placeholder="Enter note content"
                  required
                  rows={10}
                />
              </div>
              <div className="form-group">
                <label htmlFor="tags">Tags (comma-separated)</label>
                <input
                  type="text"
                  id="tags"
                  value={newNote.tags}
                  onChange={(e) => setNewNote({
                    ...newNote,
                    tags: e.target.value
                  })}
                  placeholder="react, javascript, web-development"
                />
              </div>
              <div className="form-actions">
                <button type="submit" className="submit-btn">
                  {editingNote ? 'Update Note' : 'Save Note'}
                </button>
                <button 
                  type="button" 
                  className="cancel-btn"
                  onClick={() => {
                    setShowAddForm(false)
                    setEditingNote(null)
                  }}
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

export default Notes
